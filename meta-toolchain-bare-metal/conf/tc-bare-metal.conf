# Define default system toolchain (default to built-in)
TOOLCHAIN = 'gnu'

# Define a secondary toolchain called 'bare-metal'
# the 'bare-metal' toolchain can be activated using:
#
# Per package (preferred):
#   TOOLCHAIN_pn-bash = 'bare-metal'
#
# Globally:
#   TOOLCHAIN = 'bare-metal'
#   TOOLCHAIN_pn-eglibc = 'gnu'

# When the secondary toolchain is used, we add an automatic depend...
DEPENDS_append_toolchain-bare-metal = " virtual/TOOLCHAIN-BARE-METAL"

# ...the depend can be provided by a recipe or as an ASSUME_PROVIDED
ASSUME_PROVIDED .= " virtual/TOOLCHAIN-BARE-METAL"

# Default values from bitbake.conf...
# Variables with a '*' are things likely to need to be overridden:
#
#   FULL_OPTIMIZATION = "-O2 -pipe ${DEBUG_FLAGS}"
#   DEBUG_OPTIMIZATION = "-O -fno-omit-frame-pointer ${DEBUG_FLAGS} -pipe"
#   SELECTED_OPTIMIZATION = "${@d.getVar(['FULL_OPTIMIZATION', 'DEBUG_OPTIMIZATION'][d.getVar('DEBUG_BUILD', True) == '1'], True)}"
#
# * TOOLCHAIN_OPTIONS = " --sysroot=${STAGING_DIR_TARGET}"
#
# * TARGET_CPPFLAGS = ""
# * TARGET_CFLAGS = "${TARGET_CPPFLAGS} ${SELECTED_OPTIMIZATION}"
# * TARGET CXXFLAGS = "${TARGET_CFLAGS} -fpermissive"
# * TARGET_LDFLAGS = "-Wl,-O1 ${TARGET_LINK_HASH_STYLE}"
#
#   TARGET_CC_ARCH = "${TUNE_CCARGS}"
#   TARGET_LD_ARCH = "${TUNE_LDARGS}"
#   TARGET_AS_ARCH = "${TUNE_ASARGS}"
#
#   HOST_CC_ARCH = "${TARGET_CC_ARCH}"
#   HOST_LD_ARCH = "${TARGET_LD_ARCH}"
#   HOST_AS_ARCH = "${TARGET_AS_ARCH}"
#
# * CC = "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
# * CXX = "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
# * F77 = "${CCACHE}${HOST_PREFIX}g77 ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
# * CPP = "${HOST_PREFIX}gcc -E${TOOLCHAIN_OPTIONS} ${HOST_CC_ARCH}"
# * LD = "${HOST_PREFIX}ld${TOOLCHAIN_OPTIONS} ${HOST_LD_ARCH}"
# * CCLD = "${CC}"
#   AR = "${HOST_PREFIX}ar"
#   AS = "${HOST_PREFIX}as ${HOST_AS_ARCH}"
#   RANLIB = "${HOST_PREFIX}ranlib"
#   STRIP = "${HOST_PREFIX}strip"
#   OBJCOPY = "${HOST_PREFIX}objcopy"
#   OBJDUMP = "${HOST_PREFIX}objdump"
#   NM = "${HOST_PREFIX}nm"

# Override values:
HOST_PREFIX_toolchain-bare-metal = "arm-none-eabi-"

#Remove default armv7-a parameters provided by default toolchain
#This value are filled by cbp2make during conversion - Will remove default armv7-a parameters provided by default toolchain
TARGET_CC_ARCH_toolchain-bare-metal = ""
TARGET_LD_ARCH_toolchain-bare-metal = ""
TARGET_AS_ARCH_toolchain-bare-metal = ""
TOOLCHAIN_OPTIONS_toolchain-bare-metal = ""

CC_toolchain-bare-metal  = "${CCACHE}${HOST_PREFIX}gcc ${TARGET_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CXX_toolchain-bare-metal = "${CCACHE}${HOST_PREFIX}g++ ${TARGET_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CPP_toolchain-bare-metal = "${CCACHE}${HOST_PREFIX}gcc -E${TOOLCHAIN_OPTIONS} ${TARGET_CC_ARCH}"
LD_toolchain-bare-metal  = "${HOST_PREFIX}gcc${TOOLCHAIN_OPTIONS} ${TARGET_LD_ARCH}"
AS_toolchain-bare-metal  = "${HOST_PREFIX}gcc ${TARGET_AS_ARCH}"
RANLIB_toolchain-bare-metal  = "${HOST_PREFIX}ranlib"
AR_toolchain-bare-metal  = "${HOST_PREFIX}ar"
OBJCOPY_toolchain-bare-metal = "${HOST_PREFIX}objcopy"
OBJDUMP_toolchain-bare-metal = "${HOST_PREFIX}objdump"
NM_toolchain-bare-metal = "${HOST_PREFIX}nm"
STRIP_toolchain-bare-metal = "${HOST_PREFIX}strip"
SIZE_toolchain-bare-metal = "${HOST_PREFIX}size"
