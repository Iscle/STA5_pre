//!
//!  \file    boot_cmost.h
//!  \brief   <i><b> CMOST Firmware download interface file </b></i>
//!  \details CMOST Firmware download interface file
//!  \author  Raffaele Belardi, Roberto Allevi, Alberto Saviotti
//!

#ifndef BOOT_CMOST_H
#define BOOT_CMOST_H

/**************************************
 * Debug configuration
 *************************************/
/*
 * Macros in this section affect the boot behaviour to aid debug mode
 *
 * Normally NOT defined!
 */

/*!
 * \def		BOOT_READ_BACK_AND_COMPARE_CMOST
 *			After writing a chunk of data to the CMOST read it back and
 *			check for mismatches with the written data.
 *
 *			WARNING: there is a bug in the CMOST that causes the first
 *			32-bit word returned on a read from certain locations (the DSP memories)
 *			to be invalid (see also WORKAROUND_FOR_CMOST_READ_BUG). The code enabled with this
 *			define only partially copes with this bug, in particular it assumes that
 *			all reads are for memory thus generates false mismatches for reads from
 *			registers (which are not affected by the above bug)
 *
 * \todo	this comment refers to very old CMOST versions, check if it can
 * 			be eliminated (and also the code)
 */
#undef BOOT_READ_BACK_AND_COMPARE_CMOST

/**************************************
 * Firmware and parameter files
 *************************************/
/*
 * All of these defines must be updated every time there is a new
 * CMOST firmware release
 *
 * BOOT_FIRMWARE_BINARY_*
 *
 * Filename of the file containing the CMOST
 * firmware image in binary format (extension .boot).
 * Used for CONFIG_COMM_CMOST_FIRMWARE_FILE
 * for boot-time reading of the firmware.
 *
 * BOOT_FIRMWARE_INCLUDE_*
 *
 * Filenames of the files containing the pre-processed CMOST
 * firmware images.
 * These files are delivered with the CMOST firmware and contain
 * the same data of the .boot file but in C language .h format.
 *
 * BOOT_FIRMWARE_MEMORY_ADDRESS_*
 *
 * Filename of the files containing the list of CMOST memory addresses
 * used to download the parameters (and in ETAL for the etal_read_parameter
 * and etal_write_parameter API).
 * This is a C language .h file provided with the CMOST firmware.
 *
 * BOOT_PARAM_INCLUDE_*
 *
 * Filename of the files containing the customized parameters that the BOOT
 * application loads into the CMOST device after the firmware download completes
 * These files are not provided with the CMOST firmware, they must
 * be generated  by the end-user
 * This is a C language .h file that can be generated by the CMOST control GUI
 * If this macro is #undef for some CMOST variant, TUNER_DRIVER will skip
 * downloading the parameters for that variant. In this case the parameter
 * file need not be included in the build.
 * If none of the BOOT_PARAM_INCLUDE_* is defined, the param/ directory
 * may be omitted from the build.
 *
 * BOOT_SILICON_VERSION_*
 *
 * String identifying the silicon version in the format
 *  "cc vvvv"
 * where
 *   cc   = silicon cut
 *   vvvv = silicon version
 * On the CMOST it is obtained by reading two registers starting at 0x1401E, for example
 *   R 1401E 2
 *   R 1401E: 8e004247 56373636
 *   4244     is the cc field,
 *   56373636 is the vvvv field
 *
 */
#if defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_BC)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_BC.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT_BC.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_BC.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "BC V766" /* TODO not validated */
	#undef  BOOT_PARAM_INCLUDE_STAR_T                // not supported due to lack of memory definition file

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_BF)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_BF.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT_BF.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_BF.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "BA V766" /* this is not a mistake, the BF is not properly programmed */

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_T               "TDA7707_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_T                // use if param file is not available
	#endif

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_BG)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_BG.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_BG.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "BG V766"
	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_T               "TDA7707_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_T                // use if param file is not available
	#endif

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_CA)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_CA.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_CA.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "CA V766"

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_T               "TDA7707_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_T                // use if param file is not available
	#endif
	
#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_DA)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_DA.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_DA.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "DA V766"
	
	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_T               "TDA7707_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_T                // use if param file is not available
	#endif

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_T_CUT_EB)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_T     "TDA7707_OM_CUT_EB.h"
	#define BOOT_FIRMWARE_BINARY_STAR_T             "TDA7707_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_T            "TDA7707_OM_CUT_EB.boot.h"
	#define BOOT_SILICON_VERSION_STAR_T             "EB V766"
		
	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_T               "TDA7707_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_T                // use if param file is not available
	#endif
#endif

#if defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_S_CUT_BA)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_S     "TDA7708_OM_CUT_BA.h"
	#define BOOT_FIRMWARE_BINARY_STAR_S             "TDA7708_OM_CUT_BA.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_S            "TDA7708_OM_CUT_BA.boot.h"
	#define BOOT_SILICON_VERSION_STAR_S             "BA VA79" /* TODO not validated */

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_S               "TDA7708_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_S                // use if param file is not available
	#endif

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_S_CUT_BC)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_S     "TDA7708_OM_CUT_BC.h"
	#define BOOT_FIRMWARE_BINARY_STAR_S             "TDA7708_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_S            "TDA7708_OM_CUT_BC.boot.h"
	#define BOOT_SILICON_VERSION_STAR_S             "BC VA79" /* TODO not validated */

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_S               "TDA7708_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_S                // use if param file is not available
	#endif

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_STAR_S_CUT_BC)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_STAR_S     "TDA7708_OM_CUT_CB.h"
	#define BOOT_FIRMWARE_BINARY_STAR_S             "TDA7708_OM_CUT.boot"
	#define BOOT_FIRMWARE_INCLUDE_STAR_S            "TDA7708_OM_CUT_CB.boot.h"
	#define BOOT_SILICON_VERSION_STAR_S             "CB VA79" /* TODO not validated */
	
	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_STAR_S               "TDA7708_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_STAR_S                // use if param file is not available
	#endif

#endif

#if defined (CONFIG_ETAL_SUPPORT_CMOST_DOT_T_CUT_AB)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_DOT_T      "STA710_OM_CUT_AB.h"
	#define BOOT_FIRMWARE_BINARY_DOT_T              "STA710_OM_CUT_AB.boot"
	#define BOOT_FIRMWARE_INCLUDE_DOT_T             "STA710_OM_CUT_AB.boot.h"
	#define BOOT_SILICON_VERSION_DOT_T              "" /* TODO not known */
	#undef  BOOT_PARAM_INCLUDE_DOT_T                // not supported due to lack of memory definition file

#elif defined (CONFIG_ETAL_SUPPORT_CMOST_DOT_T_CUT_BA)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_DOT_T      "STA710_OM_CUT_BA.h"
	#define BOOT_FIRMWARE_BINARY_DOT_T              "STA710_OM_CUT_BA.boot"
	#define BOOT_FIRMWARE_INCLUDE_DOT_T             "STA710_OM_CUT_BA.boot.h"
	#define BOOT_SILICON_VERSION_DOT_T              "" /* TODO not known */

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_DOT_T                "STA710_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_DOT_T                 // use if param file is not available
	#endif

#endif

#if defined (CONFIG_ETAL_SUPPORT_CMOST_DOT_S_CUT_2_1)
	#define BOOT_FIRMWARE_MEMORY_ADDRESS_DOT_S      "STA709_OM.h"
	#define BOOT_FIRMWARE_BINARY_DOT_S              "STA709_OM.boot"
	#define BOOT_FIRMWARE_INCLUDE_DOT_S             "STA709_OM.boot.h"
	#define BOOT_SILICON_VERSION_DOT_S              ""/* TODO not known */

	#if defined CONFIG_COMM_CMOST_CUSTOMER_SETTINGS
	#define BOOT_PARAM_INCLUDE_DOT_S                "STA709_Cust_settings.h"
	#else
	#undef BOOT_PARAM_INCLUDE_DOT_S                 // use if param file is not available
	#endif

#endif

/**************************************
 * Macros
 *************************************/
/*
 * BOOT_ARRAY_*
 *
 * Name of the array containing the firmware to be downloaded
 * to the CMOST device, in case CONFIG_COMM_CMOST_FIRMWARE_EMBEDDED
 * is defined.
 * This is the name of the arrays defined in the BOOT_FIRMWARE_INCLUDE_*
 * files
 *
 * BOOT_PARAM_ARRAY_*
 *
 * Name of the array containing the parameters to be downloaded to the CMOST
 * after the boot is complete.
 * This is the name of the arrays defined in BOOT_PARAM_INCLUDE_*
 * files
 *
 * TODO: the param file format is still under discussion so re-check this stuff
 *
 */
#define BOOT_ARRAY_STAR_T         (CMOST_Firmware_STAR_T)
#define BOOT_ARRAY_STAR_S         (CMOST_Firmware_STAR_S)
#define BOOT_ARRAY_DOT_T          (CMOST_Firmware_DOT_T)
#define BOOT_ARRAY_DOT_S          (CMOST_Firmware_DOT_S)
#define BOOT_PARAM_ARRAY_STAR_T   (coeffInit_TDA7707)
#define BOOT_PARAM_ARRAY_STAR_S   (coeffInit_TDA7708)
#define BOOT_PARAM_ARRAY_DOT_T    (coeffInit_STA710)
#define BOOT_PARAM_ARRAY_DOT_S    (coeffInit_STA709)

/**************************************
 * Function prototypes
 *************************************/
tSInt BOOT_Download_CMOST(BootTunerTy tuner_type, tU32 deviceID, tU8 *image, tU32 image_size, tBool load_default_params);
tChar *BOOT_tunerTypeToString(BootTunerTy type);
#ifdef CONFIG_APP_TEST_INITIALIZATION
/* The CONFIG_APP_TEST_INITIALIZATION needs to access the CMOST firmware so this function
 * is made global for only that case */
tSInt BOOT_getFirmwareReferences_CMOST(BootTunerTy tuner_type, tChar **filename, tU8 **array, tU32 *size, tU8 **param_array, tU32 *param_entries);
#endif

#endif // BOOT_CMOST_H

// End of file
