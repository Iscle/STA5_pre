//________________________________________________________________________
//| FILE:         lld_uart.h
//| PROJECT:      Newcastle - STA895
//| SW-COMPONENT: LLD
//|_______________________________________________________________________
//| DESCRIPTION:  UART low level driver header file
//|_______________________________________________________________________
//| COPYRIGHT:    (c) 2007 STMicroelectronics, Arzano (ITALY)
//| HISTORY:
//| Date      | Modification               | Author
//|_______________________________________________________________________
//| 07.11.09  | Initial revision           | L. Cotignano
//|_______________________________________________________________________

#ifndef _LLD_UART_H_
#define _LLD_UART_H_

//----------------------------------------------------------------------
// Defines and macros
//----------------------------------------------------------------------
#define LLD_UART0_ADDRESS       UART0_REG_START_ADDR
#define LLD_UART1_ADDRESS       UART1_REG_START_ADDR
#define LLD_UART2_ADDRESS       UART2_REG_START_ADDR
#define LLD_UART3_ADDRESS       UART3_REG_START_ADDR

#define UARTid(x)               ((UartMap*)x)

#define LDD_UART_FLAG_RI        0x00000100
#define LDD_UART_FLAG_TXFE      0x00000080
#define LDD_UART_FLAG_RXFF      0x00000040
#define LDD_UART_FLAG_TXFF      0x00000020
#define LDD_UART_FLAG_RXFE      0x00000010
#define LDD_UART_FLAG_BUSY      0x00000008
#define LDD_UART_FLAG_DCD       0x00000004
#define LDD_UART_FLAG_DSR       0x00000002
#define LDD_UART_FLAG_CTS       0x00000001

//----------------------------------------------------------------------
// Types
//----------------------------------------------------------------------
typedef tU32 LLD_UART_IdTy;

// Baud rates
typedef enum
{
    LLD_UART_300_BPS = 300,
    LLD_UART_600_BPS = 600,
    LLD_UART_1200_BPS = 1200,
    LLD_UART_2400_BPS = 2400,
    LLD_UART_4800_BPS = 4800,
    LLD_UART_9600_BPS = 9600,
    LLD_UART_14400_BPS = 14400,
    LLD_UART_19200_BPS = 19200,
    LLD_UART_38400_BPS = 38400,
    LLD_UART_57600_BPS = 57600,
    LLD_UART_115200_BPS = 115200,
    LLD_UART_230400_BPS = 230400,
    LLD_UART_460800_BPS = 460800,
    LLD_UART_921600_BPS = 921600,
    LLD_UART_3000000_BPS = 3000000,
    LLD_UART_FPGA_BPS = 92000
}
LLD_UART_BaudRateTy;

// Stop bits allowed by UART peripheral
typedef enum
{
   LLD_UART_ONE_STOP_BITS,
   LLD_UART_TWO_STOP_BITS
}
LLD_UART_StopBitsTy;

// Data format allowed by UART peripheral
typedef enum
{
   LLD_UART_FIVE_BITS,
   LLD_UART_SIX_BITS,
   LLD_UART_SEVEN_BITS,
   LLD_UART_EIGTH_BITS
}
LLD_UART_DataLenTy;

// Parity settings
typedef enum
{
   LLD_UART_NO_PARITY,
   LLD_UART_EVEN_PARITY,
   LLD_UART_ODD_PARITY,
   LLD_UART_SPS_ONE_PARITY,
   LLD_UART_SPS_ZERO_PARITY
}
LLD_UART_ParityTy;

// Interrupt masks types generated by UART peripheral
typedef enum
{
	// Modem interrupt masks
	LLD_UART_RI_INT_MASK			=	0x001,
	LLD_UART_CTS_INT_MASK			=	0x002,
	LLD_UART_DCD_INT_MASK			=	0x004,
	LLD_UART_DSR_INT_MASK			=	0x008,

	// Reception and transmission interrupt masks
	LLD_UART_RX_INT_MASK			=	0x010,
	LLD_UART_TX_INT_MASK			=	0x020,
	LLD_UART_TIMEOUT_INT_MASK		=	0x040,

	// Error interrupt masks
	LLD_UART_FRAME_ERROR_INT_MASK	=	0x080,
	LLD_UART_PARITY_ERROR_INT_MASK	=	0x100,
	LLD_UART_BREAK_ERROR_INT_MASK	=	0x200,
	LLD_UART_OVERRUN_ERROR_INT_MASK	=	0x400,

	LLD_UART_ALL_ERROR_INT_MASK		=	0x780,
	LLD_UART_ALLRECEIVE_INT_MASK	=	0x7D0,
	LLD_UART_ALL_INT_MASK			=	0xFFF
}
LLD_UART_InterruptTy;

// Rx/Tx Fifo TriggerLevel
typedef enum
{
#ifdef PLATFORM_IS_ADR3
	LLD_UART_4_BYTES_TRIGGER_LEVEL 	= 0x0,
	LLD_UART_8_BYTES_TRIGGER_LEVEL 	= 0x1,
	LLD_UART_16_BYTES_TRIGGER_LEVEL = 0x2,
	LLD_UART_24_BYTES_TRIGGER_LEVEL	= 0x3,
	LLD_UART_28_BYTES_TRIGGER_LEVEL = 0x4,
#else
	LLD_UART_1_BYTES_TRIGGER_LEVEL 	= 0x0,
	LLD_UART_2_BYTES_TRIGGER_LEVEL 	= 0x1,
	LLD_UART_4_BYTES_TRIGGER_LEVEL 	= 0x2,
	LLD_UART_8_BYTES_TRIGGER_LEVEL	= 0x3,
	LLD_UART_16_BYTES_TRIGGER_LEVEL = 0x4,
	LLD_UART_32_BYTES_TRIGGER_LEVEL	= 0x5,
	LLD_UART_48_BYTES_TRIGGER_LEVEL = 0x6
#endif
}
LLD_UART_FifoLevelTy;

// DMA enable types
typedef enum
{
	LLD_UART_DMA_RX    = BIT_0,
	LLD_UART_DMA_TX    = BIT_1,
	LLD_UART_DMA_ERR   = BIT_2,
}
LLD_UART_DMATy;

typedef enum
{
    UART__RECEIVE_OK                     = 0x0,
    UART__FRAMING_ERROR                  = 0x1,
    UART__PARITY_ERROR                  	= 0x2,
    UART__BREAK_ERROR                    = 0x4,
    UART__OVERRUN_ERROR                  = 0x8,
} LLD_UART_REC_STATUSTy;

// UART communication control block structure definition
typedef volatile struct
{
	LLD_UART_IdTy	id;							// UART id (it corresponds with the peripheral's base address)
    tU8         	*TxBufStart;                // Pointer to the first byte to transfer
	tU8 			*TxBufCurrent;				// Pointer to the next byte to TX
	tU8				*TxBufEnd;					// Pointer to the last byte+1 of buffer to TX
	tS32			TxBufTotalBytes;			// Total bytes transmitted

	tU8				*RxBufStart;				// Pointer to the first byte of user defined read buffer to use for RX
	tU8				*RxBufRead;					// Pointer to the first read byte available into the RX buffer
	tU8				*RxBufWrite;				// Pointer to the last read byte available into the RX buffer
	tU8				*RxBufEnd;					// Pointer to the last byte+1 of user defined read buffer to use for RX
	tBool			RxBufOverflow;				// Overflow indication flag
	tS32			RxBufSize;      			// RX buffer size in bytes
	tS32 			RxFreeBufCount;				// Free space into the RX buffer
	tS32			RxBufTotalBytes;			// Total number of bytes received

}
LLD_UART_BufferControlTy;

/* Uart comunication control block struct definition */
typedef struct
{
	LLD_UART_IdTy	id;							// UART id (it corresponds with the peripheral's base address)
   tU8*           pu8WrBuffer;      /* Write buffer start address */
   tU8*           pu8WrBufferEnd;
   tU32           u32WrBuffSize;    /* Size of Write-Buffer */
   tU8*           pu8WrBufferISR;   /* Pointer to Tx Fifo buffer used by ISR */
   tU8*           pu8WrBufferDEV;   /* Pointer to Tx Fifo buffer used by DEVICE */
   tU32           u32WrNbytes;      /* Number of bytes to be Tx */
   /* Info's */
//   tU32           u32TransmitBytes; /* Total Number of bytes transmitted */
//   tU32           u32WrNumberOfOverflowBytes; /* Number of bytes thrown away because of buffer overflow */
 //  tU32           u32WrNumberOfOverflows;     /* Number of Buffer-overflow situations */

   tU8*           pu8RdBuffer;      /* Rx Fifo buffer start address */
   tU8*           pu8RdBufferEnd;
   tU32           u32RdBuffSize;    /* Size of Read-Buffer */
   tU8*           pu8RdBufferISR;   /* Pointer to Rx Fifo buffer used by ISR */
   tU8*           pu8RdBufferDEV;   /* Pointer to Rx Fifo buffer used by DEVICE */
   tU32           u32RdNbytes;      /* Number of Bytes in Read buffer */
   /* Info's */
 //  tU32           u32ReceivedBytes; /* Total Number of bytes received */
  // tU32           u32RdNumberOfOverflowBytes; /* Number of bytes thrown away because of buffer overflow */
 //  tU32           u32RdNumberOfOverflows;     /* Number of Buffer-overflow situations */

} UART_trBuffCtrl;
//----------------------------------------------------------------------
// function prototypes
//----------------------------------------------------------------------
tU8	 	LLD_UART_ReadRxFifo             (LLD_UART_IdTy id);
tVoid 	LLD_UART_WriteTxFifo            (LLD_UART_IdTy id, tU8 data);
tU32    LLD_UART_DataRegAddress         (LLD_UART_IdTy id);
tU16    LLD_UART_GetInterruptStatus     (LLD_UART_IdTy id);
tU16 	LLD_UART_GetRawInterruptStatus	(LLD_UART_IdTy id);
tU16    LLD_UART_GetFlagRegister        (LLD_UART_IdTy id);
tVoid   LLD_UART_ClearInterrupt         (LLD_UART_IdTy id, LLD_UART_InterruptTy interrupt);
tU16    LLD_UART_IsInterruptRaised(LLD_UART_IdTy id, LLD_UART_InterruptTy interrupt_mask);
tVoid   LLD_UART_RxBufferEmpty			(UART_trBuffCtrl *  parUartBuffCtrl);
tVoid   LLD_UART_TxBufferEmpty			(UART_trBuffCtrl *  parUartBuffCtrl);
tU16 	LLD_UART_IsTxFifoEmpty          (LLD_UART_IdTy id);
tU16    LLD_UART_IsTxFifoFull           (LLD_UART_IdTy id);
tU16    LLD_UART_IsRxFifoEmpty          (LLD_UART_IdTy id);
tU16    LLD_UART_IsRxFifoFull           (LLD_UART_IdTy id);
tU16 	LLD_UART_IsBusy					(LLD_UART_IdTy id);
tVoid 	LLD_UART_Enable                 (LLD_UART_IdTy id);
tVoid   LLD_UART_Disable                (LLD_UART_IdTy id);
tVoid 	LLD_UART_TxReset                (LLD_UART_IdTy id);
tVoid 	LLD_UART_RxReset                (LLD_UART_IdTy id);
tVoid   LLD_UART_FifoEnable             (LLD_UART_IdTy id);
tVoid   LLD_UART_FifoDisable            (LLD_UART_IdTy id);
tVoid 	LLD_UART_RxEnable               (LLD_UART_IdTy id);
tVoid 	LLD_UART_RxDisable              (LLD_UART_IdTy id);
tVoid 	LLD_UART_TxEnable               (LLD_UART_IdTy id);
tVoid 	LLD_UART_TxDisable              (LLD_UART_IdTy id);
tVoid   LLD_UART_SetBaudRate            (LLD_UART_IdTy id, tU32 sys_bus_frequency, LLD_UART_BaudRateTy baudrate);
tVoid 	LLD_UART_SetParity              (LLD_UART_IdTy id, LLD_UART_ParityTy parity);
tVoid 	LLD_UART_SetStopBits            (LLD_UART_IdTy id, LLD_UART_StopBitsTy stopBits);
tVoid 	LLD_UART_SetDataLen             (LLD_UART_IdTy id, LLD_UART_DataLenTy dataLen);
tVoid 	LLD_UART_SetRxFifoTriggerLevel  (LLD_UART_IdTy id, LLD_UART_FifoLevelTy fifoLevel);
tVoid 	LLD_UART_SetTxFifoTriggerLevel  (LLD_UART_IdTy id, LLD_UART_FifoLevelTy fifoLevel);
tVoid 	LLD_UART_Config                 (LLD_UART_IdTy id, tU32 sys_bus_frequency, LLD_UART_BaudRateTy baudrate,LLD_UART_StopBitsTy stopBits,LLD_UART_DataLenTy dataLen,LLD_UART_ParityTy parity);
tVoid 	LLD_UART_InterruptEnable        (LLD_UART_IdTy id,LLD_UART_InterruptTy intr);
tVoid 	LLD_UART_InterruptDisable       (LLD_UART_IdTy id,LLD_UART_InterruptTy intr);
tVoid 	LLD_UART_DMAEnable              (LLD_UART_IdTy id,LLD_UART_DMATy type);
tVoid 	LLD_UART_DMADisable             (LLD_UART_IdTy id,LLD_UART_DMATy type);
tVoid   LLD_UART_IRDAEnable             (LLD_UART_IdTy id);
tVoid   LLD_UART_IRDADisable            (LLD_UART_IdTy id);
tU8     LLD_UART_GetRxFifoTriggerLevel  (LLD_UART_IdTy id);
tU8     LLD_UART_GetTxFifoTriggerLevel  (LLD_UART_IdTy id);
tVoid 	LLD_UART_INT_RxEnter			(LLD_UART_IdTy id);
tVoid 	LLD_UART_INT_TxEnter			(LLD_UART_IdTy id);
tVoid 	LLD_UART_INT_TimeoutEnter		(LLD_UART_IdTy id);
tVoid   LLD_UART_EnableHwFlowControl    (LLD_UART_IdTy id);
tVoid   LLD_UART_DisableHwFlowControl   (LLD_UART_IdTy id);
tVoid   LLD_UART_DisableLoopBack        (LLD_UART_IdTy id);
tVoid   LLD_UART_EnableLoopBack         (LLD_UART_IdTy id);
tVoid   LLD_UART_Clear_ErrorStatusReg   (LLD_UART_IdTy id);
tVoid   LLD_UART_ResetReg               (LLD_UART_IdTy id);
tVoid   LLD_UART_u32ReadFIFO            (LLD_UART_IdTy id, UART_trBuffCtrl *  parUartBuffCtrl,tU32 *p_receive_error);
tU32    LLD_UART_u32Read                ( tU8 * ps8Buffer, tU32 u32nbytes, UART_trBuffCtrl *  parUartBuffCtrl);
tU32    LLD_UART_WriteFIFO              (LLD_UART_IdTy id, UART_trBuffCtrl *  parUartBuffCtrl);
tVoid   LLD_UART_Write                  (LLD_UART_IdTy id, UART_trBuffCtrl *  parUartBuffCtrl, tU8 *ps8Buffer, tU32 u32nbytes);
tU32 	LLD_UART_WritePoll ( LLD_UART_IdTy id , tPU8 TxBuffer , tU32 u32NData );

#if (LLD_UART_STA660_ROM_USED == TRUE)
#define LLD_UART_ReadRxFifo(a)                               ((tU8 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_ReadRxFifo])(a)
#define LLD_UART_WriteTxFifo(a,b)                            ((tVoid (*)(LLD_UART_IdTy,tU8))ROM_LLD_Table[ENU_LLD_UART_WriteTxFifo])(a,b)
#define LLD_UART_DataRegAddress(a)                           ((tU32 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_DataRegAddress])(a)
#define LLD_UART_GetInterruptStatus(a)                       ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_GetInterruptStatus])(a)
#define LLD_UART_GetRawInterruptStatus(a)                    ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_GetRawInterruptStatus])(a)
#define LLD_UART_GetFlagRegister(a)                          ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_GetFlagRegister])(a)
#define LLD_UART_ClearInterrupt(a,b)                         ((tVoid (*)(LLD_UART_IdTy,LLD_UART_InterruptTy))ROM_LLD_Table[ENU_LLD_UART_ClearInterrupt])(a,b)
#define LLD_UART_IsInterruptRaised(a,b)                      ((tU16 (*)(LLD_UART_IdTy,LLD_UART_InterruptTy))ROM_LLD_Table[ENU_LLD_UART_IsInterruptRaised])(a,b)
#define LLD_UART_RxBufferEmpty(a)                            ((tVoid (*)(UART_trBuffCtrl *))ROM_LLD_Table[ENU_LLD_UART_RxBufferEmpty])(a)
#define LLD_UART_TxBufferEmpty(a)                            ((tVoid (*)(UART_trBuffCtrl *))ROM_LLD_Table[ENU_LLD_UART_TxBufferEmpty])(a)
#define LLD_UART_IsTxFifoEmpty(a)                            ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IsTxFifoEmpty])(a)
#define LLD_UART_IsTxFifoFull(a)                             ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IsTxFifoFull])(a)
#define LLD_UART_IsRxFifoEmpty(a)                            ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IsRxFifoEmpty])(a)
#define LLD_UART_IsRxFifoFull(a)                             ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IsRxFifoFull])(a)
#define LLD_UART_IsBusy(a)                                   ((tU16 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IsBusy])(a)
#define LLD_UART_Enable(a)                                   ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_Enable])(a)
#define LLD_UART_Disable(a)                                  ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_Disable])(a)
#define LLD_UART_TxReset(a)                                  ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_TxReset])(a)
#define LLD_UART_RxReset(a)                                  ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_RxReset])(a)
#define LLD_UART_FifoEnable(a)                               ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_FifoEnable])(a)
#define LLD_UART_FifoDisable(a)                              ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_FifoDisable])(a)
#define LLD_UART_RxEnable(a)                                 ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_RxEnable])(a)
#define LLD_UART_RxDisable(a)                                ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_RxDisable])(a)
#define LLD_UART_TxEnable(a)                                 ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_TxEnable])(a)
#define LLD_UART_TxDisable(a)                                ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_TxDisable])(a)
#define LLD_UART_SetBaudRate(a,b,c)                          ((tVoid (*)(LLD_UART_IdTy,tU32,LLD_UART_BaudRateTy))ROM_LLD_Table[ENU_LLD_UART_SetBaudRate])(a,b,c)
#define LLD_UART_SetParity(a,b)                              ((tVoid (*)(LLD_UART_IdTy,LLD_UART_ParityTy))ROM_LLD_Table[ENU_LLD_UART_SetParity])(a,b)
#define LLD_UART_SetStopBits(a,b)                            ((tVoid (*)(LLD_UART_IdTy,LLD_UART_StopBitsTy))ROM_LLD_Table[ENU_LLD_UART_SetStopBits])(a,b)
#define LLD_UART_SetDataLen(a,b)                             ((tVoid (*)(LLD_UART_IdTy,LLD_UART_DataLenTy))ROM_LLD_Table[ENU_LLD_UART_SetDataLen])(a,b)
#define LLD_UART_SetRxFifoTriggerLevel(a,b)                  ((tVoid (*)(LLD_UART_IdTy,LLD_UART_FifoLevelTy))ROM_LLD_Table[ENU_LLD_UART_SetRxFifoTriggerLevel])(a,b)
#define LLD_UART_SetTxFifoTriggerLevel(a,b)                  ((tVoid (*)(LLD_UART_IdTy,LLD_UART_FifoLevelTy))ROM_LLD_Table[ENU_LLD_UART_SetTxFifoTriggerLevel])(a,b)
#define LLD_UART_Config(a,b,c,d,e,f)                         ((tVoid (*)(LLD_UART_IdTy,tU32,LLD_UART_BaudRateTy,LLD_UART_StopBitsTy,LLD_UART_DataLenTy,LLD_UART_ParityTy))ROM_LLD_Table[ENU_LLD_UART_Config])(a,b,c,d,e,f)
#define LLD_UART_InterruptEnable(a,b)                        ((tVoid (*)(LLD_UART_IdTy,LLD_UART_InterruptTy))ROM_LLD_Table[ENU_LLD_UART_InterruptEnable])(a,b)
#define LLD_UART_InterruptDisable(a,b)                       ((tVoid (*)(LLD_UART_IdTy,LLD_UART_InterruptTy))ROM_LLD_Table[ENU_LLD_UART_InterruptDisable])(a,b)
#define LLD_UART_DMAEnable(a,b)                              ((tVoid (*)(LLD_UART_IdTy,LLD_UART_DMATy))ROM_LLD_Table[ENU_LLD_UART_DMAEnable])(a,b)
#define LLD_UART_DMADisable(a,b)                             ((tVoid (*)(LLD_UART_IdTy,LLD_UART_DMATy))ROM_LLD_Table[ENU_LLD_UART_DMADisable])(a,b)
#define LLD_UART_IRDAEnable(a)                               ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IRDAEnable])(a)
#define LLD_UART_IRDADisable(a)                              ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_IRDADisable])(a)
#define LLD_UART_GetRxFifoTriggerLevel(a)                    ((tU8 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_GetRxFifoTriggerLevel])(a)
#define LLD_UART_GetTxFifoTriggerLevel(a)                    ((tU8 (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_GetTxFifoTriggerLevel])(a)
#define LLD_UART_INT_RxEnter(a)                              ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_INT_RxEnter])(a)
#define LLD_UART_INT_TxEnter(a)                              ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_INT_TxEnter])(a)
#define LLD_UART_INT_TimeoutEnter(a)                         ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_INT_TimeoutEnter])(a)
#define LLD_UART_EnableHwFlowControl(a)                      ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_EnableHwFlowControl])(a)
#define LLD_UART_DisableHwFlowControl(a)                     ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_DisableHwFlowControl])(a)
#define LLD_UART_DisableLoopBack(a)                          ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_DisableLoopBack])(a)
#define LLD_UART_EnableLoopBack(a)                           ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_EnableLoopBack])(a)
#define LLD_UART_Clear_ErrorStatusReg(a)                     ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_Clear_ErrorStatusReg])(a)
#define LLD_UART_ResetReg(a)                                 ((tVoid (*)(LLD_UART_IdTy))ROM_LLD_Table[ENU_LLD_UART_ResetReg])(a)
#define LLD_UART_u32ReadFIFO(a,b,c)                          ((tVoid (*)(LLD_UART_IdTy,UART_trBuffCtrl *,tU32 *))ROM_LLD_Table[ENU_LLD_UART_u32ReadFIFO])(a,b,c)
#define LLD_UART_u32Read(a,b,c)                          	 ((tU32 (*)(tU8 *,tU32,UART_trBuffCtrl *))ROM_LLD_Table[ENU_LLD_UART_u32Read])(a,b,c)
#define LLD_UART_WriteFIFO(a,b)                          	 ((tU32 (*)(LLD_UART_IdTy,UART_trBuffCtrl *))ROM_LLD_Table[ENU_LLD_UART_WriteFIFO])(a,b)
#define LLD_UART_Write(a,b,c,d)                         	 ((tVoid (*)(LLD_UART_IdTy,UART_trBuffCtrl *,tU8 *,tU32))ROM_LLD_Table[ENU_LLD_UART_Write])(a,b,c,d)
#define LLD_UART_WritePoll(a,b,c)							 ((tU32  (*)(LLD_UART_IdTy,tPU8,tU32))ROM_LLD_Table[ENU_LLD_UART_WritePoll])(a,b,c)
#endif

#endif // _LLD_UART_H_

// End of file
