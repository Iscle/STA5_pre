//!
//!  \file    rif_etalapi_cnv.h
//!  \brief   <i><b> Radio interface etalapi conversion functions entry point </b></i>
//!  \details Radio interface etalapi conversion functions.
//!  \author  David Pastor
//!

#ifndef RIF_ETALAPI_CNV_H
#define RIF_ETALAPI_CNV_H

#ifdef __cplusplus
extern "C" {
#endif

///
// Defines
///
typedef enum {
	RIF_ETALAPI_CNV_POINTER_NULL     = 0x00,    // pointer is null, parameter not present
	RIF_ETALAPI_CNV_POINTER_VALID    = 0x01     // pointer is not null, parameter present
} rif_etalapi_cnv_pointer_type_enum;

/*!
 * \enum	ETAL_EVENTS
 * 			List all the events generated by ETAL
 */
typedef enum
{
	ETAL_EVENT		= 0x00,
	DATAPATH_EVENT	= 0x01,
	QUALITY_EVENT	= 0x02
} NOTIF_EVENTS;

///
// Exported functions
///

extern tSInt rif_etalapi_cnv_checkCmdNumber(tU8 *cmd, tU32 clen);
extern tSInt rif_etalapi_cnv_cmd(tU8 *cmd, tU32 clen, tU8 *resp, tU32 *rlen);

extern tSInt rif_etalapi_cnv_resp_add_tU8(tU8 *resp, tU32 *rlen, tU8 value);
extern tSInt rif_etalapi_cnv_resp_add_tU16(tU8 *resp, tU32 *rlen, tU16 value);
extern tSInt rif_etalapi_cnv_resp_add_tU32(tU8 *resp, tU32 *rlen, tU32 value);
extern tSInt rif_etalapi_cnv_resp_add_tChar(tU8 *resp, tU32 *rlen, tChar value);
extern tSInt rif_etalapi_cnv_resp_add_tBool(tU8 *resp, tU32 *rlen, tBool value);
extern tSInt rif_etalapi_cnv_resp_add_pointer_type(tU8 *resp, tU32 *rlen, tVoid *ptr);
extern tSInt rif_etalapi_cnv_resp_add_ETAL_STATUS(tU8 *resp, tU32 *rlen, ETAL_STATUS value);
extern tSInt rif_etalapi_cnv_resp_add_EtalBcastStandard(tU8 *resp, tU32 *rlen, EtalBcastStandard value);

extern tSInt rif_etalapi_cnv_create_resp(tU8 *cmd, tU32 clen, tU8 *resp, tU32 *rlen, tU8 status);

extern tSInt rif_etalapi_cnv_type_get_tU8(tU8 **cmd, tU32 *clen, tU8 *rvalue);
extern tSInt rif_etalapi_cnv_type_get_ptU8(tU8 **cmd, tU32 *clen, tU8 **rvalue);
extern tSInt rif_etalapi_cnv_type_get_tU32(tU8 **cmd, tU32 *clen, tU32 *rvalue);
extern tSInt rif_etalapi_cnv_type_get_tS32(tU8 **cmd, tU32 *clen, tS32 *rvalue);
extern tSInt rif_etalapi_cnv_type_get_pointer_type(tU8 **cmd, tU32 *clen, rif_etalapi_cnv_pointer_type_enum *rvalue);
extern tSInt rif_etalapi_cnv_type_get_p(tU8 **cmd, tU32 *clen, void **rvalue);
extern tSInt rif_etalapi_cnv_type_get_ETAL_HANDLE(tU8 **cmd, tU32 *clen, ETAL_HANDLE *rvalue);

extern void rif_etalapi_cnv_CbNotify(void * pvContext, ETAL_EVENTS dwEvent, void* pvParams);

#ifdef __cplusplus
}
#endif

#endif // RIF_ETALAPI_CNV_H

// End of file
