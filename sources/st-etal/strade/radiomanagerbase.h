#ifndef RADIOMANAGERBASE_H
#define RADIOMANAGERBASE_H

#include <QList>
#include "defines.h"
#include "storage.h"
#include "radio_storage_types.h"
#include "shellwindow.h"

struct DataContainer
{
    QVariant content;
};

enum Events
{
    // Events generated by user or by device
    EVENT_NONE              = 0,
    EVENT_RADIO_LASTSTATUS  = 1,
    EVENT_BOOT_ON           = 2,
    EVENT_POWER_UP          = 3,
    EVENT_POWER_DOWN        = 4,
    EVENT_SEND_MW           = 5,
    EVENT_SEND_CIS          = 6,
    EVENT_RFU1              = 7,  // Not used
    EVENT_MUTE_TOGGLE       = 8,
    EVENT_SOURCE            = 9,
    EVENT_LIST              = 10,
    EVENT_RFU2              = 11, // Not used
    EVENT_QUALITY_ENABLE    = 12,
    EVENT_QUALITY_DISABLE   = 13,
    EVENT_SEEK_UP           = 14,
    EVENT_SEEK_DOWN         = 15,
    EVENT_SERVICE_SELECT    = 16,
    EVENT_VOLUME_UP         = 17,
    EVENT_VOLUME_DOWN       = 18,
    EVENT_FREQUENCY_CHANGE  = 19,
    EVENT_RFU3              = 20, // Not used
    EVENT_PRESET_SELECT     = 21,
    EVENT_PRESET_SAVE       = 22,
    EVENT_PRESET_CLEAR      = 23,
    EVENT_LEARN             = 24,

    // Internally generated events
    EVENT_CHECK_ALIVE       = 100,
    EVENT_DATA_ON_SYNC      = 101,
    EVENT_AUTO_CHECK_DATA   = 102,
    EVENT_DATA_RDS_IN       = 103,
    EVENT_STOP_RDS          = 104,
    EVENT_QUALITY_SNR       = 105,
    EVENT_STOP_QUALITY_SNR  = 106,

    // Stop/restart all events
    EVENT_STOP_ALL_EVENTS   = 200,
    EVENT_START_ALL_EVENTS  = 201
};

struct EventPackage
{
    Events event;
    DataContainer dataContainer;
};

class RadioManagerBase
{
    public:
        RadioManagerBase();

        virtual ~RadioManagerBase();

        QString getDab3ChannelFromIndex(int index);
        quint32 getDab3IndexFromFrequency(int freq);
        quint32 getDab3FrequencyFromIndex(int index);
        quint32 getFreqFromIndex(BandTy band, quint32 index, CountryTy country);
        quint32 getIndexFromFreq(BandTy band, quint32 freq);

        // Incoming HMI event handlers
        virtual void RadioLastStatus() = 0;
        virtual StatusCodeTy BootOn() = 0; // Booting firmware

        virtual StatusCodeTy PowerOn() = 0;
        virtual StatusCodeTy PowerOff() = 0;

        virtual StatusCodeTy Source(BandTy newBand) = 0;

        virtual StatusCodeTy MuteToggle() = 0; // Toggle mute audio
        virtual void VolumeUp() = 0; // Step up volume
        virtual void VolumeDown() = 0; // Step down volume

        virtual StatusCodeTy NextFrequency(unsigned int newFreq, BandTy newBand, SystemMode newMode) = 0; // Step frequency up
        virtual StatusCodeTy Seek(bool upDirection) = 0; // Seeking up/down for the next station

        virtual void List() = 0; // trigger band scan

        virtual bool ProcessEvent(Events event, QVariant data) = 0;

        void Initialize(void* par)
        {
            // Initialize class member to point to the passed address
            radioStatusGlobal = static_cast<RadioStatusGlobal *> (par);

            // Initialize service table list
            radioStatusGlobal->panelData.list.serviceList.clear();
        }

        // This member is not allocated dynamically by RadioManager but it will be set to point
        // to the RadioStatusGlobal variable passed at the time of instance of RadioManager
        // (i.e. LaunchWindow)
        RadioStatusGlobal* radioStatusGlobal;

    public slots:
        void CommandForRadioManagerSlot(Events event, QVariant data);

    private:
        //Storage<RadioStatusGlobal> radioStorage;
        //RadioStatusGlobal radioStatusGlobal;

        QList<unsigned int> dabFreqList;
        QList<QString> dab3ChannelList;
};

#endif // RADIOMANAGERBASE_H
